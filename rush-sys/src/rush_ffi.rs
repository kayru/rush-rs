/* automatically generated by rust-bindgen */

pub type rush_platform_callback_startup =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type rush_platform_callback_update =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type rush_platform_callback_shutdown =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_app_config {
    pub name: *const ::std::os::raw::c_char,
    pub vsync: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub fullscreen: bool,
    pub resizable: bool,
    pub debug: bool,
    pub warp: bool,
    pub minimize_latency: bool,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub user_data: *mut ::std::os::raw::c_void,
    pub on_startup: rush_platform_callback_startup,
    pub on_update: rush_platform_callback_update,
    pub on_shutdown: rush_platform_callback_shutdown,
}
extern "C" {
    pub fn rush_app_config_init(out_cfg: *mut rush_app_config);
}
extern "C" {
    pub fn rush_platform_main(cfg: *const rush_app_config) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_window {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_window() -> *mut rush_window;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_color_rgba {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_device() -> *mut rush_gfx_device;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_context {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_context() -> *mut rush_gfx_context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_vertex_format {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_vertex_shader {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_pixel_shader {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_geometry_shader {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_compute_shader {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_mesh_shader {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_ray_tracing_pipeline {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_acceleration_structure {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_texture {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_buffer {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_sampler {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_blend_state {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_depth_stencil_state {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_rasterizer_state {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_technique {
    pub handle: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_descriptor_set {
    pub handle: u16,
}
pub const RUSH_GFX_BLEND_PARAM_ZERO: rush_gfx_blend_param = 0;
pub const RUSH_GFX_BLEND_PARAM_ONE: rush_gfx_blend_param = 1;
pub const RUSH_GFX_BLEND_PARAM_SRC_COLOR: rush_gfx_blend_param = 2;
pub const RUSH_GFX_BLEND_PARAM_INV_SRC_COLOR: rush_gfx_blend_param = 3;
pub const RUSH_GFX_BLEND_PARAM_SRC_ALPHA: rush_gfx_blend_param = 4;
pub const RUSH_GFX_BLEND_PARAM_INV_SRC_ALPHA: rush_gfx_blend_param = 5;
pub const RUSH_GFX_BLEND_PARAM_DEST_ALPHA: rush_gfx_blend_param = 6;
pub const RUSH_GFX_BLEND_PARAM_INV_DEST_ALPHA: rush_gfx_blend_param = 7;
pub const RUSH_GFX_BLEND_PARAM_DEST_COLOR: rush_gfx_blend_param = 8;
pub const RUSH_GFX_BLEND_PARAM_INV_DEST_COLOR: rush_gfx_blend_param = 9;
pub type rush_gfx_blend_param = i32;
pub const RUSH_GFX_BLEND_OP_ADD: rush_gfx_blend_op = 0;
pub const RUSH_GFX_BLEND_OP_SUBTRACT: rush_gfx_blend_op = 1;
pub const RUSH_GFX_BLEND_OP_REV_SUBTRACT: rush_gfx_blend_op = 2;
pub const RUSH_GFX_BLEND_OP_MIN: rush_gfx_blend_op = 3;
pub const RUSH_GFX_BLEND_OP_MAX: rush_gfx_blend_op = 4;
pub type rush_gfx_blend_op = i32;
pub const RUSH_GFX_TEXTURE_FILTER_POINT: rush_gfx_texture_filter = 0;
pub const RUSH_GFX_TEXTURE_FILTER_LINEAR: rush_gfx_texture_filter = 1;
pub const RUSH_GFX_TEXTURE_FILTER_ANISOTROPIC: rush_gfx_texture_filter = 2;
pub type rush_gfx_texture_filter = i32;
pub const RUSH_GFX_TEXTURE_WRAP_REPEAT: rush_gfx_texture_wrap = 0;
pub const RUSH_GFX_TEXTURE_WRAP_MIRROR: rush_gfx_texture_wrap = 1;
pub const RUSH_GFX_TEXTURE_WRAP_CLAMP: rush_gfx_texture_wrap = 2;
pub type rush_gfx_texture_wrap = i32;
pub const RUSH_GFX_COMPARE_FUNC_NEVER: rush_gfx_compare_func = 0;
pub const RUSH_GFX_COMPARE_FUNC_LESS: rush_gfx_compare_func = 1;
pub const RUSH_GFX_COMPARE_FUNC_EQUAL: rush_gfx_compare_func = 2;
pub const RUSH_GFX_COMPARE_FUNC_LESS_EQUAL: rush_gfx_compare_func = 3;
pub const RUSH_GFX_COMPARE_FUNC_GREATER: rush_gfx_compare_func = 4;
pub const RUSH_GFX_COMPARE_FUNC_NOT_EQUAL: rush_gfx_compare_func = 5;
pub const RUSH_GFX_COMPARE_FUNC_GREATER_EQUAL: rush_gfx_compare_func = 6;
pub const RUSH_GFX_COMPARE_FUNC_ALWAYS: rush_gfx_compare_func = 7;
pub type rush_gfx_compare_func = i32;
pub const RUSH_GFX_FILL_MODE_SOLID: rush_gfx_fill_mode = 0;
pub const RUSH_GFX_FILL_MODE_WIREFRAME: rush_gfx_fill_mode = 1;
pub type rush_gfx_fill_mode = i32;
pub const RUSH_GFX_CULL_MODE_NONE: rush_gfx_cull_mode = 0;
pub const RUSH_GFX_CULL_MODE_CW: rush_gfx_cull_mode = 1;
pub const RUSH_GFX_CULL_MODE_CCW: rush_gfx_cull_mode = 2;
pub type rush_gfx_cull_mode = i32;
pub const RUSH_GFX_EMBEDDED_SHADER_PRIMITIVE_PLAIN_PS: rush_gfx_embedded_shader_type = 0;
pub const RUSH_GFX_EMBEDDED_SHADER_PRIMITIVE_TEXTURED_PS: rush_gfx_embedded_shader_type = 1;
pub const RUSH_GFX_EMBEDDED_SHADER_PRIMITIVE_2D_VS: rush_gfx_embedded_shader_type = 2;
pub const RUSH_GFX_EMBEDDED_SHADER_PRIMITIVE_3D_VS: rush_gfx_embedded_shader_type = 3;
pub type rush_gfx_embedded_shader_type = i32;
pub const RUSH_GFX_PRIMITIVE_POINT_LIST: rush_gfx_primitive_type = 0;
pub const RUSH_GFX_PRIMITIVE_LINE_LIST: rush_gfx_primitive_type = 1;
pub const RUSH_GFX_PRIMITIVE_LINE_STRIP: rush_gfx_primitive_type = 2;
pub const RUSH_GFX_PRIMITIVE_TRIANGLE_LIST: rush_gfx_primitive_type = 3;
pub const RUSH_GFX_PRIMITIVE_TRIANGLE_STRIP: rush_gfx_primitive_type = 4;
pub type rush_gfx_primitive_type = i32;
pub const RUSH_GFX_PASS_NONE: rush_gfx_pass_flags = 0;
pub const RUSH_GFX_PASS_CLEAR_COLOR: rush_gfx_pass_flags = 1;
pub const RUSH_GFX_PASS_CLEAR_DEPTH_STENCIL: rush_gfx_pass_flags = 2;
pub const RUSH_GFX_PASS_DISCARD_COLOR: rush_gfx_pass_flags = 4;
pub type rush_gfx_pass_flags = i32;
pub const RUSH_GFX_SHADER_SOURCE_UNKNOWN: rush_gfx_shader_source_type = 0;
pub const RUSH_GFX_SHADER_SOURCE_SPV: rush_gfx_shader_source_type = 1;
pub const RUSH_GFX_SHADER_SOURCE_GLSL: rush_gfx_shader_source_type = 2;
pub const RUSH_GFX_SHADER_SOURCE_HLSL: rush_gfx_shader_source_type = 3;
pub const RUSH_GFX_SHADER_SOURCE_DXBC: rush_gfx_shader_source_type = 4;
pub const RUSH_GFX_SHADER_SOURCE_DXIL: rush_gfx_shader_source_type = 5;
pub const RUSH_GFX_SHADER_SOURCE_MSL: rush_gfx_shader_source_type = 6;
pub type rush_gfx_shader_source_type = i32;
pub const RUSH_GFX_FORMAT_UNKNOWN: rush_gfx_format = 0;
pub const RUSH_GFX_FORMAT_D24_UNORM_S8_UINT: rush_gfx_format = 1;
pub const RUSH_GFX_FORMAT_D24_UNORM_X8: rush_gfx_format = 2;
pub const RUSH_GFX_FORMAT_D32_FLOAT: rush_gfx_format = 3;
pub const RUSH_GFX_FORMAT_D32_FLOAT_S8_UINT: rush_gfx_format = 4;
pub const RUSH_GFX_FORMAT_R8_UNORM: rush_gfx_format = 5;
pub const RUSH_GFX_FORMAT_R16_FLOAT: rush_gfx_format = 6;
pub const RUSH_GFX_FORMAT_R16_UINT: rush_gfx_format = 7;
pub const RUSH_GFX_FORMAT_R32_FLOAT: rush_gfx_format = 8;
pub const RUSH_GFX_FORMAT_R32_UINT: rush_gfx_format = 9;
pub const RUSH_GFX_FORMAT_RG8_UNORM: rush_gfx_format = 10;
pub const RUSH_GFX_FORMAT_RG16_FLOAT: rush_gfx_format = 11;
pub const RUSH_GFX_FORMAT_RG32_FLOAT: rush_gfx_format = 12;
pub const RUSH_GFX_FORMAT_RGB32_FLOAT: rush_gfx_format = 13;
pub const RUSH_GFX_FORMAT_RGB8_UNORM: rush_gfx_format = 14;
pub const RUSH_GFX_FORMAT_RGBA16_FLOAT: rush_gfx_format = 15;
pub const RUSH_GFX_FORMAT_RGBA16_UNORM: rush_gfx_format = 16;
pub const RUSH_GFX_FORMAT_RGBA32_FLOAT: rush_gfx_format = 17;
pub const RUSH_GFX_FORMAT_RGBA8_UNORM: rush_gfx_format = 18;
pub const RUSH_GFX_FORMAT_RGBA8_SRGB: rush_gfx_format = 19;
pub const RUSH_GFX_FORMAT_BGRA8_UNORM: rush_gfx_format = 20;
pub const RUSH_GFX_FORMAT_BGRA8_SRGB: rush_gfx_format = 21;
pub const RUSH_GFX_FORMAT_BC1_UNORM: rush_gfx_format = 22;
pub const RUSH_GFX_FORMAT_BC1_UNORM_SRGB: rush_gfx_format = 23;
pub const RUSH_GFX_FORMAT_BC3_UNORM: rush_gfx_format = 24;
pub const RUSH_GFX_FORMAT_BC3_UNORM_SRGB: rush_gfx_format = 25;
pub const RUSH_GFX_FORMAT_BC4_UNORM: rush_gfx_format = 26;
pub const RUSH_GFX_FORMAT_BC5_UNORM: rush_gfx_format = 27;
pub const RUSH_GFX_FORMAT_BC6H_UFLOAT: rush_gfx_format = 28;
pub const RUSH_GFX_FORMAT_BC6H_SFLOAT: rush_gfx_format = 29;
pub const RUSH_GFX_FORMAT_BC7_UNORM: rush_gfx_format = 30;
pub const RUSH_GFX_FORMAT_BC7_UNORM_SRGB: rush_gfx_format = 31;
pub type rush_gfx_format = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_color_target {
    pub target: rush_gfx_texture,
    pub clear_color: rush_color_rgba,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_depth_target {
    pub target: rush_gfx_texture,
    pub clear_depth: f32,
    pub clear_stencil: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_viewport {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
    pub depth_min: f32,
    pub depth_max: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_rect {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_shader_source {
    pub type_: rush_gfx_shader_source_type,
    pub entry: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_void,
    pub size_bytes: u32,
}
pub const RUSH_GFX_VERTEX_SEMANTIC_UNUSED: rush_gfx_vertex_semantic = 0;
pub const RUSH_GFX_VERTEX_SEMANTIC_POSITION: rush_gfx_vertex_semantic = 1;
pub const RUSH_GFX_VERTEX_SEMANTIC_TEXCOORD: rush_gfx_vertex_semantic = 2;
pub const RUSH_GFX_VERTEX_SEMANTIC_COLOR: rush_gfx_vertex_semantic = 3;
pub const RUSH_GFX_VERTEX_SEMANTIC_NORMAL: rush_gfx_vertex_semantic = 4;
pub const RUSH_GFX_VERTEX_SEMANTIC_TANGENTU: rush_gfx_vertex_semantic = 5;
pub const RUSH_GFX_VERTEX_SEMANTIC_TANGENTV: rush_gfx_vertex_semantic = 6;
pub const RUSH_GFX_VERTEX_SEMANTIC_INSTANCEDATA: rush_gfx_vertex_semantic = 7;
pub const RUSH_GFX_VERTEX_SEMANTIC_BONEINDEX: rush_gfx_vertex_semantic = 8;
pub const RUSH_GFX_VERTEX_SEMANTIC_BONEWEIGHT: rush_gfx_vertex_semantic = 9;
pub type rush_gfx_vertex_semantic = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_vertex_element {
    pub semantic: rush_gfx_vertex_semantic,
    pub index: u32,
    pub format: rush_gfx_format,
    pub stream: u32,
}
pub const RUSH_GFX_USAGE_SHADER_RESOURCE: rush_gfx_usage_flags = 1;
pub const RUSH_GFX_USAGE_RENDER_TARGET: rush_gfx_usage_flags = 2;
pub const RUSH_GFX_USAGE_DEPTH_STENCIL: rush_gfx_usage_flags = 4;
pub const RUSH_GFX_USAGE_STORAGE_IMAGE: rush_gfx_usage_flags = 8;
pub const RUSH_GFX_USAGE_TRANSFER_SRC: rush_gfx_usage_flags = 16;
pub const RUSH_GFX_USAGE_TRANSFER_DST: rush_gfx_usage_flags = 32;
pub type rush_gfx_usage_flags = i32;
pub const RUSH_GFX_TEXTURE_TYPE_1D: rush_gfx_texture_type = 0;
pub const RUSH_GFX_TEXTURE_TYPE_2D: rush_gfx_texture_type = 1;
pub const RUSH_GFX_TEXTURE_TYPE_3D: rush_gfx_texture_type = 2;
pub const RUSH_GFX_TEXTURE_TYPE_CUBE: rush_gfx_texture_type = 3;
pub const RUSH_GFX_TEXTURE_TYPE_1D_ARRAY: rush_gfx_texture_type = 4;
pub const RUSH_GFX_TEXTURE_TYPE_2D_ARRAY: rush_gfx_texture_type = 5;
pub const RUSH_GFX_TEXTURE_TYPE_CUBE_ARRAY: rush_gfx_texture_type = 6;
pub type rush_gfx_texture_type = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_texture_desc {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
    pub mips: u32,
    pub samples: u32,
    pub format: rush_gfx_format,
    pub texture_type: rush_gfx_texture_type,
    pub usage: rush_gfx_usage_flags,
    pub debug_name: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_depth_stencil_desc {
    pub compare_func: rush_gfx_compare_func,
    pub enable: bool,
    pub write_enable: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_rasterizer_desc {
    pub fill_mode: rush_gfx_fill_mode,
    pub cull_mode: rush_gfx_cull_mode,
    pub depth_bias: f32,
    pub depth_bias_slope_scale: f32,
}
pub const RUSH_GFX_BUFFER_FLAG_NONE: rush_gfx_buffer_flags = 0;
pub const RUSH_GFX_BUFFER_FLAG_VERTEX: rush_gfx_buffer_flags = 1;
pub const RUSH_GFX_BUFFER_FLAG_INDEX: rush_gfx_buffer_flags = 2;
pub const RUSH_GFX_BUFFER_FLAG_CONSTANT: rush_gfx_buffer_flags = 4;
pub const RUSH_GFX_BUFFER_FLAG_STORAGE: rush_gfx_buffer_flags = 8;
pub const RUSH_GFX_BUFFER_FLAG_TEXEL: rush_gfx_buffer_flags = 16;
pub const RUSH_GFX_BUFFER_FLAG_INDIRECT_ARGS: rush_gfx_buffer_flags = 32;
pub const RUSH_GFX_BUFFER_FLAG_RAYTRACING: rush_gfx_buffer_flags = 64;
pub const RUSH_GFX_BUFFER_FLAG_TRANSIENT: rush_gfx_buffer_flags = 1073741824;
pub type rush_gfx_buffer_flags = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_buffer_desc {
    pub flags: rush_gfx_buffer_flags,
    pub format: rush_gfx_format,
    pub stride: u32,
    pub count: u32,
    pub host_visible: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_spec_constant {
    pub id: u32,
    pub offset: u32,
    pub size: u32,
}
pub const RUSH_GFX_STAGE_FLAG_NONE: rush_gfx_stage_flags = 0;
pub const RUSH_GFX_STAGE_FLAG_VERTEX: rush_gfx_stage_flags = 1;
pub const RUSH_GFX_STAGE_FLAG_GEOMETRY: rush_gfx_stage_flags = 2;
pub const RUSH_GFX_STAGE_FLAG_PIXEL: rush_gfx_stage_flags = 4;
pub const RUSH_GFX_STAGE_FLAG_HULL: rush_gfx_stage_flags = 8;
pub const RUSH_GFX_STAGE_FLAG_DOMAIN: rush_gfx_stage_flags = 16;
pub const RUSH_GFX_STAGE_FLAG_COMPUTE: rush_gfx_stage_flags = 32;
pub const RUSH_GFX_STAGE_FLAG_MESH: rush_gfx_stage_flags = 64;
pub const RUSH_GFX_STAGE_FLAG_RAYTRACING: rush_gfx_stage_flags = 128;
pub type rush_gfx_stage_flags = i32;
pub const RUSH_GFX_DESCRIPTOR_SET_FLAG_NONE: rush_gfx_descriptor_set_flags = 0;
pub const RUSH_GFX_DESCRIPTOR_SET_FLAG_TEXTURE_ARRAY: rush_gfx_descriptor_set_flags = 1;
pub type rush_gfx_descriptor_set_flags = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_descriptor_set_desc {
    pub constant_buffers: u16,
    pub samplers: u16,
    pub textures: u16,
    pub rw_images: u16,
    pub rw_buffers: u16,
    pub rw_typed_buffers: u16,
    pub acceleration_structures: u16,
    pub stage_flags: rush_gfx_stage_flags,
    pub flags: rush_gfx_descriptor_set_flags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_shader_bindings_desc {
    pub descriptor_sets: *const rush_gfx_descriptor_set_desc,
    pub descriptor_set_count: u32,
    pub use_default_descriptor_set: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_technique_desc {
    pub cs: rush_gfx_compute_shader,
    pub ps: rush_gfx_pixel_shader,
    pub gs: rush_gfx_geometry_shader,
    pub vs: rush_gfx_vertex_shader,
    pub ms: rush_gfx_mesh_shader,
    pub vf: rush_gfx_vertex_format,
    pub bindings: rush_gfx_shader_bindings_desc,
    pub work_group_size: [u16; 3usize],
    pub spec_constant_count: u32,
    pub spec_constants: *const rush_gfx_spec_constant,
    pub spec_data: *const ::std::os::raw::c_void,
    pub spec_data_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_texture_data {
    pub offset: u64,
    pub pixels: *const ::std::os::raw::c_void,
    pub mip: u32,
    pub slice: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_blend_state_desc {
    pub src: rush_gfx_blend_param,
    pub dst: rush_gfx_blend_param,
    pub op: rush_gfx_blend_op,
    pub alpha_src: rush_gfx_blend_param,
    pub alpha_dst: rush_gfx_blend_param,
    pub alpha_op: rush_gfx_blend_op,
    pub alpha_separate: bool,
    pub enable: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct rush_gfx_sampler_desc {
    pub filter_min: rush_gfx_texture_filter,
    pub filter_mag: rush_gfx_texture_filter,
    pub filter_mip: rush_gfx_texture_filter,
    pub wrap_u: rush_gfx_texture_wrap,
    pub wrap_v: rush_gfx_texture_wrap,
    pub wrap_w: rush_gfx_texture_wrap,
    pub compare_func: rush_gfx_compare_func,
    pub compare_enable: bool,
    pub anisotropy: f32,
    pub mip_lod_bias: f32,
}
extern "C" {
    pub fn rush_gfx_create_vertex_format(
        elements: *const rush_gfx_vertex_element,
        count: u32,
    ) -> rush_gfx_vertex_format;
}
extern "C" {
    pub fn rush_gfx_create_vertex_shader(
        code: *const rush_gfx_shader_source,
    ) -> rush_gfx_vertex_shader;
}
extern "C" {
    pub fn rush_gfx_create_pixel_shader(
        code: *const rush_gfx_shader_source,
    ) -> rush_gfx_pixel_shader;
}
extern "C" {
    pub fn rush_gfx_create_geometry_shader(
        code: *const rush_gfx_shader_source,
    ) -> rush_gfx_geometry_shader;
}
extern "C" {
    pub fn rush_gfx_create_compute_shader(
        code: *const rush_gfx_shader_source,
    ) -> rush_gfx_compute_shader;
}
extern "C" {
    pub fn rush_gfx_create_technique(desc: *const rush_gfx_technique_desc) -> rush_gfx_technique;
}
extern "C" {
    pub fn rush_gfx_create_texture(
        tex: *const rush_gfx_texture_desc,
        data: *const rush_gfx_texture_data,
        count: u32,
        pixels: *const ::std::os::raw::c_void,
    ) -> rush_gfx_texture;
}
extern "C" {
    pub fn rush_gfx_create_blend_state(
        desc: *const rush_gfx_blend_state_desc,
    ) -> rush_gfx_blend_state;
}
extern "C" {
    pub fn rush_gfx_create_sampler_state(desc: *const rush_gfx_sampler_desc) -> rush_gfx_sampler;
}
extern "C" {
    pub fn rush_gfx_create_depth_stencil_state(
        desc: *const rush_gfx_depth_stencil_desc,
    ) -> rush_gfx_depth_stencil_state;
}
extern "C" {
    pub fn rush_gfx_create_rasterizer_state(
        desc: *const rush_gfx_rasterizer_desc,
    ) -> rush_gfx_rasterizer_state;
}
extern "C" {
    pub fn rush_gfx_create_buffer(
        desc: *const rush_gfx_buffer_desc,
        data: *const ::std::os::raw::c_void,
    ) -> rush_gfx_buffer;
}
extern "C" {
    pub fn rush_gfx_release_vertex_format(h: rush_gfx_vertex_format);
}
extern "C" {
    pub fn rush_gfx_release_vertex_shader(h: rush_gfx_vertex_shader);
}
extern "C" {
    pub fn rush_gfx_release_pixel_shader(h: rush_gfx_pixel_shader);
}
extern "C" {
    pub fn rush_gfx_release_geometry_shader(h: rush_gfx_geometry_shader);
}
extern "C" {
    pub fn rush_gfx_release_compute_shader(h: rush_gfx_compute_shader);
}
extern "C" {
    pub fn rush_gfx_release_mesh_shader(h: rush_gfx_mesh_shader);
}
extern "C" {
    pub fn rush_gfx_release_ray_tracing_pipeline(h: rush_gfx_ray_tracing_pipeline);
}
extern "C" {
    pub fn rush_gfx_release_acceleration_structure(h: rush_gfx_acceleration_structure);
}
extern "C" {
    pub fn rush_gfx_release_technique(h: rush_gfx_technique);
}
extern "C" {
    pub fn rush_gfx_release_texture(h: rush_gfx_texture);
}
extern "C" {
    pub fn rush_gfx_release_blend_state(h: rush_gfx_blend_state);
}
extern "C" {
    pub fn rush_gfx_release_sampler(h: rush_gfx_sampler);
}
extern "C" {
    pub fn rush_gfx_release_depth_stencil_state(h: rush_gfx_depth_stencil_state);
}
extern "C" {
    pub fn rush_gfx_release_rasterizer_state(h: rush_gfx_rasterizer_state);
}
extern "C" {
    pub fn rush_gfx_release_buffer(h: rush_gfx_buffer);
}
extern "C" {
    pub fn rush_gfx_release_descriptor_set(h: rush_gfx_descriptor_set);
}
extern "C" {
    pub fn rush_gfx_update_buffer(
        ctx: *mut rush_gfx_context,
        h: rush_gfx_buffer,
        data: *const ::std::os::raw::c_void,
        size: u32,
    );
}
extern "C" {
    pub fn rush_gfx_begin_update_buffer(
        ctx: *mut rush_gfx_context,
        h: rush_gfx_buffer,
        size: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rush_gfx_end_update_buffer(ctx: *mut rush_gfx_context, h: rush_gfx_buffer);
}
extern "C" {
    pub fn rush_gfx_begin_pass(
        ctx: *mut rush_gfx_context,
        color_count: u32,
        color: *const rush_gfx_color_target,
        depth: *const rush_gfx_depth_target,
        flags: rush_gfx_pass_flags,
    );
}
extern "C" {
    pub fn rush_gfx_end_pass(ctx: *mut rush_gfx_context);
}
extern "C" {
    pub fn rush_gfx_set_viewport(ctx: *mut rush_gfx_context, _viewport: *const rush_gfx_viewport);
}
extern "C" {
    pub fn rush_gfx_set_scissor_rect(ctx: *mut rush_gfx_context, rect: *const rush_gfx_rect);
}
extern "C" {
    pub fn rush_gfx_set_technique(ctx: *mut rush_gfx_context, h: rush_gfx_technique);
}
extern "C" {
    pub fn rush_gfx_set_primitive(ctx: *mut rush_gfx_context, type_: rush_gfx_primitive_type);
}
extern "C" {
    pub fn rush_gfx_set_index_stream(ctx: *mut rush_gfx_context, h: rush_gfx_buffer);
}
extern "C" {
    pub fn rush_gfx_set_vertex_stream(ctx: *mut rush_gfx_context, idx: u32, h: rush_gfx_buffer);
}
extern "C" {
    pub fn rush_gfx_set_texture(ctx: *mut rush_gfx_context, idx: u32, h: rush_gfx_texture);
}
extern "C" {
    pub fn rush_gfx_set_sampler(ctx: *mut rush_gfx_context, idx: u32, h: rush_gfx_sampler);
}
extern "C" {
    pub fn rush_gfx_set_constant_buffer(
        ctx: *mut rush_gfx_context,
        idx: u32,
        h: rush_gfx_buffer,
        offset: u32,
    );
}
extern "C" {
    pub fn rush_gfx_draw(ctx: *mut rush_gfx_context, first_vertex: u32, vertex_count: u32);
}
extern "C" {
    pub fn rush_gfx_get_embedded_shader(
        type_: rush_gfx_embedded_shader_type,
    ) -> rush_gfx_shader_source;
}
extern "C" {
    pub fn rush_embedded_font_blit_6x8(
        output: *mut u32,
        output_offset_pixels: u32,
        width: u32,
        color: u32,
        text: *const ::std::os::raw::c_char,
    );
}
