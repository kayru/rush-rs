/* automatically generated by rust-bindgen */

pub type rush_platform_callback_startup =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type rush_platform_callback_update =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type rush_platform_callback_shutdown =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_app_config {
    pub name: *const ::std::os::raw::c_char,
    pub vsync: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub fullscreen: bool,
    pub resizable: bool,
    pub debug: bool,
    pub warp: bool,
    pub minimize_latency: bool,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub user_data: *mut ::std::os::raw::c_void,
    pub on_startup: rush_platform_callback_startup,
    pub on_update: rush_platform_callback_update,
    pub on_shutdown: rush_platform_callback_shutdown,
}
#[test]
fn bindgen_test_layout_rush_app_config() {
    assert_eq!(
        ::std::mem::size_of::<rush_app_config>(),
        80usize,
        concat!("Size of: ", stringify!(rush_app_config))
    );
    assert_eq!(
        ::std::mem::align_of::<rush_app_config>(),
        8usize,
        concat!("Alignment of ", stringify!(rush_app_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).vsync as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(vsync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).max_width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).max_height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(max_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).fullscreen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).resizable as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(resizable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).debug as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).warp as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(warp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rush_app_config>())).minimize_latency as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(minimize_latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).argc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).argv as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).user_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).on_startup as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(on_startup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).on_update as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(on_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_app_config>())).on_shutdown as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_app_config),
            "::",
            stringify!(on_shutdown)
        )
    );
}
extern "C" {
    pub fn rush_app_config_init(out_cfg: *mut rush_app_config);
}
extern "C" {
    pub fn rush_platform_main(cfg: *const rush_app_config) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_window {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_window() -> *mut rush_window;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_color_rgba {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_rush_color_rgba() {
    assert_eq!(
        ::std::mem::size_of::<rush_color_rgba>(),
        16usize,
        concat!("Size of: ", stringify!(rush_color_rgba))
    );
    assert_eq!(
        ::std::mem::align_of::<rush_color_rgba>(),
        4usize,
        concat!("Alignment of ", stringify!(rush_color_rgba))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_color_rgba>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_color_rgba),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_color_rgba>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_color_rgba),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_color_rgba>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_color_rgba),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_color_rgba>())).a as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_color_rgba),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_device {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_device() -> *mut rush_gfx_device;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_context {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rush_platform_get_context() -> *mut rush_gfx_context;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_texture {
    pub handle: u16,
}
#[test]
fn bindgen_test_layout_rush_gfx_texture() {
    assert_eq!(
        ::std::mem::size_of::<rush_gfx_texture>(),
        2usize,
        concat!("Size of: ", stringify!(rush_gfx_texture))
    );
    assert_eq!(
        ::std::mem::align_of::<rush_gfx_texture>(),
        2usize,
        concat!("Alignment of ", stringify!(rush_gfx_texture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_gfx_texture>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_texture),
            "::",
            stringify!(handle)
        )
    );
}
pub const rush_gfx_pass_flags_RUSH_GFX_PASS_NONE: rush_gfx_pass_flags = 0;
pub const rush_gfx_pass_flags_RUSH_GFX_PASS_CLEAR_COLOR: rush_gfx_pass_flags = 1;
pub const rush_gfx_pass_flags_RUSH_GFX_PASS_CLEAR_DEPTH_STENCIL: rush_gfx_pass_flags = 2;
pub const rush_gfx_pass_flags_RUSH_GFX_PASS_DISCARD_COLOR: rush_gfx_pass_flags = 4;
pub type rush_gfx_pass_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_color_target {
    pub target: rush_gfx_texture,
    pub clear_color: rush_color_rgba,
}
#[test]
fn bindgen_test_layout_rush_gfx_color_target() {
    assert_eq!(
        ::std::mem::size_of::<rush_gfx_color_target>(),
        20usize,
        concat!("Size of: ", stringify!(rush_gfx_color_target))
    );
    assert_eq!(
        ::std::mem::align_of::<rush_gfx_color_target>(),
        4usize,
        concat!("Alignment of ", stringify!(rush_gfx_color_target))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_gfx_color_target>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_color_target),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rush_gfx_color_target>())).clear_color as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_color_target),
            "::",
            stringify!(clear_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rush_gfx_depth_target {
    pub target: rush_gfx_texture,
    pub clear_depth: f32,
    pub clear_stencil: u8,
}
#[test]
fn bindgen_test_layout_rush_gfx_depth_target() {
    assert_eq!(
        ::std::mem::size_of::<rush_gfx_depth_target>(),
        12usize,
        concat!("Size of: ", stringify!(rush_gfx_depth_target))
    );
    assert_eq!(
        ::std::mem::align_of::<rush_gfx_depth_target>(),
        4usize,
        concat!("Alignment of ", stringify!(rush_gfx_depth_target))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rush_gfx_depth_target>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_depth_target),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rush_gfx_depth_target>())).clear_depth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_depth_target),
            "::",
            stringify!(clear_depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rush_gfx_depth_target>())).clear_stencil as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rush_gfx_depth_target),
            "::",
            stringify!(clear_stencil)
        )
    );
}
extern "C" {
    pub fn rush_gfx_begin_pass(
        ctx: *mut rush_gfx_context,
        color_count: u32,
        color: *const rush_gfx_color_target,
        depth: *const rush_gfx_depth_target,
        flags: rush_gfx_pass_flags,
    );
}
extern "C" {
    pub fn rush_gfx_end_pass(ctx: *mut rush_gfx_context);
}
extern "C" {
    pub fn rush_gfx_draw(ctx: *mut rush_gfx_context, first_vertex: u32, vertex_count: u32);
}
